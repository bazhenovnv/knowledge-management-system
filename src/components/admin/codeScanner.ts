import { toast } from 'sonner';

export const scanForJunkCode = () => {
  const results: string[] = [];
  const issues: string[] = [];
  
  const htmlContent = document.documentElement.outerHTML;
  
  const scripts = document.querySelectorAll('script');
  scripts.forEach((script, index) => {
    if (script.src && !script.src.includes(window.location.hostname)) {
      issues.push(`–í–Ω–µ—à–Ω–∏–π —Å–∫—Ä–∏–ø—Ç #${index + 1}: ${script.src}`);
    }
    if (script.innerHTML && script.innerHTML.length > 1000) {
      issues.push(`–ë–æ–ª—å—à–æ–π –∏–Ω–ª–∞–π–Ω-—Å–∫—Ä–∏–ø—Ç #${index + 1}: ${script.innerHTML.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    }
  });
  
  const deprecatedTags = ['marquee', 'blink', 'center', 'font', 'frame', 'frameset'];
  deprecatedTags.forEach(tag => {
    const elements = document.querySelectorAll(tag);
    if (elements.length > 0) {
      issues.push(`–£—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ç–µ–≥ <${tag}>: –Ω–∞–π–¥–µ–Ω–æ ${elements.length} —à—Ç.`);
    }
  });
  
  const emptyDivs = Array.from(document.querySelectorAll('div')).filter(
    div => !div.textContent?.trim() && !div.querySelector('img, svg, video, iframe') && div.children.length === 0
  );
  if (emptyDivs.length > 5) {
    issues.push(`–ü—É—Å—Ç—ã–µ <div>: –Ω–∞–π–¥–µ–Ω–æ ${emptyDivs.length} —à—Ç.`);
  }
  
  const inlineStyles = document.querySelectorAll('[style]');
  if (inlineStyles.length > 50) {
    issues.push(`–ú–Ω–æ–≥–æ –∏–Ω–ª–∞–π–Ω-—Å—Ç–∏–ª–µ–π: ${inlineStyles.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
  }
  
  const elementsWithManyClasses = Array.from(document.querySelectorAll('*')).filter(
    el => {
      if (!el.className) return false;
      const className = typeof el.className === 'string' ? el.className : el.className.baseVal || '';
      const classCount = className.split(' ').filter(c => c.trim()).length;
      
      const ignoredSelectors = ['[data-radix', '[data-state', '[cmdk-', '[role="dialog"]', '[role="menu"]'];
      const shouldIgnore = ignoredSelectors.some(selector => {
        try {
          return el.matches(selector + '*]') || el.closest(selector + '*]');
        } catch {
          return false;
        }
      });
      
      return classCount > 20 && !shouldIgnore;
    }
  );
  if (elementsWithManyClasses.length > 0) {
    issues.push(`–≠–ª–µ–º–µ–Ω—Ç—ã —Å –∏–∑–±—ã—Ç–æ—á–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏: ${elementsWithManyClasses.length} —à—Ç.`);
    elementsWithManyClasses.slice(0, 3).forEach((el, i) => {
      const className = typeof el.className === 'string' ? el.className : el.className.baseVal || '';
      const classCount = className.split(' ').filter(c => c.trim()).length;
      issues.push(`  ‚îî‚îÄ –≠–ª–µ–º–µ–Ω—Ç #${i + 1}: ${el.tagName.toLowerCase()} (${classCount} –∫–ª–∞—Å—Å–æ–≤)`);
    });
  }
  
  const comments = htmlContent.match(/<!--[\s\S]*?-->/g) || [];
  if (comments.length > 10) {
    issues.push(`HTML –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${comments.length} —à—Ç.`);
  }
  
  const longDataAttrs = Array.from(document.querySelectorAll('*')).filter(el => {
    return Array.from(el.attributes).some(attr => 
      attr.name.startsWith('data-') && attr.value.length > 500
    );
  });
  if (longDataAttrs.length > 0) {
    issues.push(`Data-–∞—Ç—Ä–∏–±—É—Ç—ã >500 —Å–∏–º–≤–æ–ª–æ–≤: ${longDataAttrs.length} —à—Ç.`);
  }
  
  const hiddenElements = document.querySelectorAll('[hidden], [style*="display: none"], [style*="visibility: hidden"]');
  if (hiddenElements.length > 20) {
    issues.push(`–°–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: ${hiddenElements.length} —à—Ç.`);
  }
  
  if (issues.length === 0) {
    console.log('‚úì –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    toast.success('–ö–æ–¥ —á–∏—Å—Ç—ã–π! –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  } else {
    const issuesList = issues.map(issue => `  ‚Ä¢ ${issue}`).join('\n');
    console.warn(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${issues.length}\n${issuesList}`);
    toast.warning(`–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${issues.length}`, {
      description: '–ù–∞–∂–º–∏—Ç–µ "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏'
    });
  }
  
  console.log(`
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:
- –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${document.querySelectorAll('*').length}
- –°–∫—Ä–∏–ø—Ç–æ–≤: ${scripts.length}
- –°—Ç–∏–ª–µ–π (–∏–Ω–ª–∞–π–Ω): ${inlineStyles.length}
- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${comments.length}
- –ü—Ä–æ–±–ª–µ–º: ${issues.length}
  `);
  
  return issues.length;
};

export const fixJunkCode = () => {
  let fixed = 0;
  
  const emptyDivs = Array.from(document.querySelectorAll('div')).filter(
    div => !div.textContent?.trim() && 
           !div.querySelector('img, svg, video, iframe, canvas, input, button, select, textarea') && 
           div.children.length === 0 &&
           !div.id &&
           !div.getAttribute('data-radix-portal')
  );
  emptyDivs.forEach(div => {
    div.remove();
    fixed++;
  });
  
  const deprecatedTags = ['marquee', 'blink', 'center', 'font'];
  deprecatedTags.forEach(tag => {
    document.querySelectorAll(tag).forEach(el => {
      const parent = el.parentElement;
      if (parent) {
        parent.insertBefore(document.createTextNode(el.textContent || ''), el);
        el.remove();
        fixed++;
      }
    });
  });
  
  const inlineStyles = Array.from(document.querySelectorAll('[style]')).filter(el => {
    return !el.closest('[data-radix-portal], [data-sonner-toaster]') && 
           !el.getAttribute('data-state');
  });
  
  inlineStyles.slice(0, 10).forEach(el => {
    const style = el.getAttribute('style') || '';
    
    if (style.includes('display: none') || style.includes('display:none')) {
      el.classList.add('hidden');
      el.removeAttribute('style');
      fixed++;
    } else if (style.includes('visibility: hidden')) {
      el.classList.add('invisible');
      el.removeAttribute('style');
      fixed++;
    }
  });
  
  if (fixed > 0) {
    console.log(`‚úì –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${fixed}`);
    toast.success(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixed} –ø—Ä–æ–±–ª–µ–º`, {
      description: '–£–¥–∞–ª–µ–Ω—ã –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ç–µ–≥–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å—Ç–∏–ª–∏'
    });
    
    setTimeout(() => {
      scanForJunkCode();
    }, 500);
  } else {
    toast.info('–ù–µ—Ç –ø—Ä–æ–±–ª–µ–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
  }
};
