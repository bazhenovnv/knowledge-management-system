import { toast } from 'sonner';

interface ScanStatistics {
  totalElements: number;
  scripts: number;
  inlineStyles: number;
  comments: number;
  issues: number;
  emptyDivs: number;
  deprecatedTags: number;
  elementsWithManyClasses: number;
  longDataAttrs: number;
  hiddenElements: number;
  timestamp: string;
  issuesList: string[];
}

interface BackupData {
  html: string;
  timestamp: string;
  url: string;
}

const BACKUP_KEY = 'admin-console-backup';

export const scanForJunkCode = () => {
  const results: string[] = [];
  const issues: string[] = [];
  
  const htmlContent = document.documentElement.outerHTML;
  
  const scripts = document.querySelectorAll('script');
  scripts.forEach((script, index) => {
    if (script.src && !script.src.includes(window.location.hostname)) {
      issues.push(`–í–Ω–µ—à–Ω–∏–π —Å–∫—Ä–∏–ø—Ç #${index + 1}: ${script.src}`);
    }
    if (script.innerHTML && script.innerHTML.length > 1000) {
      issues.push(`–ë–æ–ª—å—à–æ–π –∏–Ω–ª–∞–π–Ω-—Å–∫—Ä–∏–ø—Ç #${index + 1}: ${script.innerHTML.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    }
  });
  
  const deprecatedTags = ['marquee', 'blink', 'center', 'font', 'frame', 'frameset'];
  let deprecatedTagsCount = 0;
  deprecatedTags.forEach(tag => {
    const elements = document.querySelectorAll(tag);
    if (elements.length > 0) {
      deprecatedTagsCount += elements.length;
      issues.push(`–£—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ç–µ–≥ <${tag}>: –Ω–∞–π–¥–µ–Ω–æ ${elements.length} —à—Ç.`);
    }
  });
  
  const emptyDivs = Array.from(document.querySelectorAll('div')).filter(
    div => !div.textContent?.trim() && !div.querySelector('img, svg, video, iframe') && div.children.length === 0
  );
  const emptyDivsCount = emptyDivs.length;
  if (emptyDivsCount > 5) {
    issues.push(`–ü—É—Å—Ç—ã–µ <div>: –Ω–∞–π–¥–µ–Ω–æ ${emptyDivsCount} —à—Ç.`);
  }
  
  const inlineStyles = document.querySelectorAll('[style]');
  if (inlineStyles.length > 50) {
    issues.push(`–ú–Ω–æ–≥–æ –∏–Ω–ª–∞–π–Ω-—Å—Ç–∏–ª–µ–π: ${inlineStyles.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
  }
  
  const elementsWithManyClasses = Array.from(document.querySelectorAll('*')).filter(
    el => {
      if (!el.className) return false;
      const className = typeof el.className === 'string' ? el.className : el.className.baseVal || '';
      const classCount = className.split(' ').filter(c => c.trim()).length;
      
      const ignoredSelectors = ['[data-radix', '[data-state', '[cmdk-', '[role="dialog"]', '[role="menu"]'];
      const shouldIgnore = ignoredSelectors.some(selector => {
        try {
          return el.matches(selector + '*]') || el.closest(selector + '*]');
        } catch {
          return false;
        }
      });
      
      return classCount > 20 && !shouldIgnore;
    }
  );
  if (elementsWithManyClasses.length > 0) {
    issues.push(`–≠–ª–µ–º–µ–Ω—Ç—ã —Å –∏–∑–±—ã—Ç–æ—á–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏: ${elementsWithManyClasses.length} —à—Ç.`);
    elementsWithManyClasses.slice(0, 3).forEach((el, i) => {
      const className = typeof el.className === 'string' ? el.className : el.className.baseVal || '';
      const classCount = className.split(' ').filter(c => c.trim()).length;
      issues.push(`  ‚îî‚îÄ –≠–ª–µ–º–µ–Ω—Ç #${i + 1}: ${el.tagName.toLowerCase()} (${classCount} –∫–ª–∞—Å—Å–æ–≤)`);
    });
  }
  
  const comments = htmlContent.match(/<!--[\s\S]*?-->/g) || [];
  if (comments.length > 10) {
    issues.push(`HTML –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${comments.length} —à—Ç.`);
  }
  
  const longDataAttrs = Array.from(document.querySelectorAll('*')).filter(el => {
    return Array.from(el.attributes).some(attr => 
      attr.name.startsWith('data-') && attr.value.length > 500
    );
  });
  if (longDataAttrs.length > 0) {
    issues.push(`Data-–∞—Ç—Ä–∏–±—É—Ç—ã >500 —Å–∏–º–≤–æ–ª–æ–≤: ${longDataAttrs.length} —à—Ç.`);
  }
  
  const hiddenElements = document.querySelectorAll('[hidden], [style*="display: none"], [style*="visibility: hidden"]');
  if (hiddenElements.length > 20) {
    issues.push(`–°–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: ${hiddenElements.length} —à—Ç.`);
  }
  
  if (issues.length === 0) {
    console.log('‚úì –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    toast.success('–ö–æ–¥ —á–∏—Å—Ç—ã–π! –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  } else {
    const issuesList = issues.map(issue => `  ‚Ä¢ ${issue}`).join('\n');
    console.warn(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${issues.length}\n${issuesList}`);
    toast.warning(`–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${issues.length}`, {
      description: '–ù–∞–∂–º–∏—Ç–µ "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏'
    });
  }
  
  const statistics: ScanStatistics = {
    totalElements: document.querySelectorAll('*').length,
    scripts: scripts.length,
    inlineStyles: inlineStyles.length,
    comments: comments.length,
    issues: issues.length,
    emptyDivs: emptyDivsCount,
    deprecatedTags: deprecatedTagsCount,
    elementsWithManyClasses: elementsWithManyClasses.length,
    longDataAttrs: longDataAttrs.length,
    hiddenElements: hiddenElements.length,
    timestamp: new Date().toISOString(),
    issuesList: issues,
  };

  console.log(`
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:
- –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${statistics.totalElements}
- –°–∫—Ä–∏–ø—Ç–æ–≤: ${statistics.scripts}
- –°—Ç–∏–ª–µ–π (–∏–Ω–ª–∞–π–Ω): ${statistics.inlineStyles}
- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${statistics.comments}
- –ü—Ä–æ–±–ª–µ–º: ${statistics.issues}
  `);
  
  return { issuesCount: issues.length, statistics };
};

export const exportScanStatistics = () => {
  const result = scanForJunkCode();
  
  if (!result.statistics) {
    toast.error('–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ');
    return;
  }

  const report = `
# –û—Ç—á—ë—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
–î–∞—Ç–∞: ${new Date(result.statistics.timestamp).toLocaleString('ru-RU')}

## –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${result.statistics.totalElements}
- –°–∫—Ä–∏–ø—Ç–æ–≤: ${result.statistics.scripts}
- –ò–Ω–ª–∞–π–Ω-—Å—Ç–∏–ª–µ–π: ${result.statistics.inlineStyles}
- HTML –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${result.statistics.comments}
- –ü—É—Å—Ç—ã—Ö <div>: ${result.statistics.emptyDivs}
- –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ç–µ–≥–æ–≤: ${result.statistics.deprecatedTags}
- –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∏–∑–±—ã—Ç–æ—á–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏: ${result.statistics.elementsWithManyClasses}
- Data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤ >500 —Å–∏–º–≤–æ–ª–æ–≤: ${result.statistics.longDataAttrs}
- –°–∫—Ä—ã—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${result.statistics.hiddenElements}

## –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${result.statistics.issues}

${result.statistics.issuesList.length > 0 ? '## –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º:\n' + result.statistics.issuesList.map(issue => `- ${issue}`).join('\n') : '‚úì –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'}

---
–û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
`.trim();

  const blob = new Blob([report], { type: 'text/markdown;charset=utf-8' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `scan-report-${new Date().toISOString().slice(0, 10)}.md`;
  link.click();
  URL.revokeObjectURL(url);

  toast.success('–û—Ç—á—ë—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω', {
    description: '–°–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ Markdown —Ñ–∞–π–ª'
  });

  const jsonData = JSON.stringify(result.statistics, null, 2);
  const jsonBlob = new Blob([jsonData], { type: 'application/json;charset=utf-8' });
  const jsonUrl = URL.createObjectURL(jsonBlob);
  const jsonLink = document.createElement('a');
  jsonLink.href = jsonUrl;
  jsonLink.download = `scan-report-${new Date().toISOString().slice(0, 10)}.json`;
  jsonLink.click();
  URL.revokeObjectURL(jsonUrl);
};

export const createBackup = () => {
  try {
    const backup: BackupData = {
      html: document.documentElement.outerHTML,
      timestamp: new Date().toISOString(),
      url: window.location.href,
    };
    
    localStorage.setItem(BACKUP_KEY, JSON.stringify(backup));
    
    const blob = new Blob([backup.html], { type: 'text/html;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `backup-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.html`;
    link.click();
    URL.revokeObjectURL(url);
    
    toast.success('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞', {
      description: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ localStorage –∏ —Å–∫–∞—á–∞–Ω–∞ —Ñ–∞–π–ª–æ–º'
    });
    
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
    toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é');
    return false;
  }
};

export const hasBackup = (): boolean => {
  const backup = localStorage.getItem(BACKUP_KEY);
  return backup !== null;
};

export const getBackupInfo = (): { timestamp: string; size: number } | null => {
  try {
    const backup = localStorage.getItem(BACKUP_KEY);
    if (!backup) return null;
    
    const data: BackupData = JSON.parse(backup);
    return {
      timestamp: data.timestamp,
      size: new Blob([data.html]).size,
    };
  } catch {
    return null;
  }
};

export const restoreBackup = () => {
  try {
    const backup = localStorage.getItem(BACKUP_KEY);
    if (!backup) {
      toast.error('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return false;
    }
    
    const data: BackupData = JSON.parse(backup);
    
    const confirmed = confirm(
      `–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –æ—Ç ${new Date(data.timestamp).toLocaleString('ru-RU')}?\n\n` +
      `‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç HTML –∫–æ–¥.\n` +
      `–í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.`
    );
    
    if (!confirmed) {
      return false;
    }
    
    document.open();
    document.write(data.html);
    document.close();
    
    toast.success('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', {
      description: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏'
    });
    
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é');
    return false;
  }
};

export const deleteBackup = () => {
  try {
    localStorage.removeItem(BACKUP_KEY);
    toast.success('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É–¥–∞–ª–µ–Ω–∞');
    return true;
  } catch (error) {
    toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é');
    return false;
  }
};

export const fixJunkCode = () => {
  let fixed = 0;
  
  const emptyDivs = Array.from(document.querySelectorAll('div')).filter(
    div => !div.textContent?.trim() && 
           !div.querySelector('img, svg, video, iframe, canvas, input, button, select, textarea') && 
           div.children.length === 0 &&
           !div.id &&
           !div.getAttribute('data-radix-portal')
  );
  emptyDivs.forEach(div => {
    div.remove();
    fixed++;
  });
  
  const deprecatedTags = ['marquee', 'blink', 'center', 'font'];
  deprecatedTags.forEach(tag => {
    document.querySelectorAll(tag).forEach(el => {
      const parent = el.parentElement;
      if (parent) {
        parent.insertBefore(document.createTextNode(el.textContent || ''), el);
        el.remove();
        fixed++;
      }
    });
  });
  
  const inlineStyles = Array.from(document.querySelectorAll('[style]')).filter(el => {
    return !el.closest('[data-radix-portal], [data-sonner-toaster]') && 
           !el.getAttribute('data-state');
  });
  
  inlineStyles.slice(0, 10).forEach(el => {
    const style = el.getAttribute('style') || '';
    
    if (style.includes('display: none') || style.includes('display:none')) {
      el.classList.add('hidden');
      el.removeAttribute('style');
      fixed++;
    } else if (style.includes('visibility: hidden')) {
      el.classList.add('invisible');
      el.removeAttribute('style');
      fixed++;
    }
  });
  
  if (fixed > 0) {
    console.log(`‚úì –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${fixed}`);
    toast.success(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixed} –ø—Ä–æ–±–ª–µ–º`, {
      description: '–£–¥–∞–ª–µ–Ω—ã –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ç–µ–≥–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å—Ç–∏–ª–∏'
    });
    
    setTimeout(() => {
      const result = scanForJunkCode();
      if (result.statistics && result.statistics.issues === 0) {
        setTimeout(() => {
          exportScanStatistics();
        }, 1000);
      }
    }, 500);
  } else {
    toast.info('–ù–µ—Ç –ø—Ä–æ–±–ª–µ–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
  }
};