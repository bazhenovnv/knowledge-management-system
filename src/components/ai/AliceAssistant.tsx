import React, { useState, useEffect, useRef } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Textarea } from "@/components/ui/textarea";
import {
  Mic,
  MicOff,
  MessageCircle,
  Volume2,
  VolumeX,
  Bot,
  Sparkles,
  Send,
} from "lucide-react";
import Icon from "@/components/ui/icon";

interface AliceAssistantProps {
  onNavigate?: (tab: string) => void;
  userRole?: "admin" | "teacher" | "student";
}

interface Message {
  id: string;
  type: "user" | "alice";
  text: string;
  timestamp: Date;
  isVoice?: boolean;
}

const AliceAssistant: React.FC<AliceAssistantProps> = ({
  onNavigate,
  userRole = "student",
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      type: "alice",
      text: "–ü—Ä–∏–≤–µ—Ç! –Ø –ê–ª–∏—Å–∞ - –≤–∞—à AI –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–∏—Å—Ç–µ–º–µ –æ–±—É—á–µ–Ω–∏—è. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π, –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–µ—Å—Ç–∞—Ö –∏ –∫—É—Ä—Å–∞—Ö, –∏–ª–∏ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
      timestamp: new Date(),
    },
  ]);
  const [inputText, setInputText] = useState("");
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [recognition, setRecognition] = useState<SpeechRecognition | null>(
    null,
  );
  const [synthesis, setSynthesis] = useState<SpeechSynthesis | null>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—á–µ–≤—ã—Ö API
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Speech Recognition
    if ("SpeechRecognition" in window || "webkitSpeechRecognition" in window) {
      const SpeechRecognition =
        window.SpeechRecognition || window.webkitSpeechRecognition;
      const recognitionInstance = new SpeechRecognition();
      recognitionInstance.lang = "ru-RU";
      recognitionInstance.continuous = false;
      recognitionInstance.interimResults = false;

      recognitionInstance.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        handleUserMessage(transcript, true);
        setIsListening(false);
      };

      recognitionInstance.onerror = () => {
        setIsListening(false);
      };

      recognitionInstance.onend = () => {
        setIsListening(false);
      };

      setRecognition(recognitionInstance);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Speech Synthesis
    if ("speechSynthesis" in window) {
      setSynthesis(window.speechSynthesis);
    }
  }, []);

  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ê–ª–∏—Å—ã
  const aliceCommands = {
    navigation: {
      –≥–ª–∞–≤–Ω–∞—è: () => onNavigate?.("home"),
      –¥–∞—à–±–æ—Ä–¥: () =>
        onNavigate?.(
          userRole === "admin"
            ? "dashboard"
            : userRole === "teacher"
              ? "dashboard"
              : "dashboard",
        ),
      –∫—É—Ä—Å—ã: () => onNavigate?.("courses"),
      —Ç–µ—Å—Ç—ã: () => onNavigate?.("tests"),
      –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: () => onNavigate?.("analytics"),
      –æ–±—É—á–µ–Ω–∏–µ: () => onNavigate?.("courses"),
      –∑–Ω–∞–Ω–∏—è: () => onNavigate?.("courses"),
    },
    responses: {
      "–∫–∞–∫ –¥–µ–ª–∞": "–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å —Å –æ–±—É—á–µ–Ω–∏–µ–º.",
      "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å": `–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º:
      ‚Ä¢ –ù–∞–π—Ç–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
      ‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
      ‚Ä¢ –û–±—ä—è—Å–Ω–∏—Ç—å –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å–∏—Å—Ç–µ–º–æ–π
      ‚Ä¢ –ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω—É–∂–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª—É
      ‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–± –æ–±—É—á–µ–Ω–∏–∏
      ${userRole === "admin" ? "‚Ä¢ –ü–æ–º–æ—á—å —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏" : ""}
      ${userRole === "teacher" ? "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –∏ –∫—É—Ä—Å—ã" : ""}`,
      –ø–æ–º–æ—â—å:
        '–°–∫–∞–∂–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: "–ø–æ–∫–∞–∂–∏ —Ç–µ—Å—Ç—ã", "–æ—Ç–∫—Ä–æ–π –∫—É—Ä—Å—ã", "–∫–∞–∫ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç" –∏–ª–∏ "—á—Ç–æ –Ω–æ–≤–æ–≥–æ".',
      —Å–ø–∞—Å–∏–±–æ: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥–∞ –ø–æ–º–æ—á—å üòä",
      –ø–æ–∫–∞: "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –£–¥–∞—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è!",
    },
  };

  const handleUserMessage = (text: string, isVoice = false) => {
    const userMessage: Message = {
      id: Date.now().toString(),
      type: "user",
      text,
      timestamp: new Date(),
      isVoice,
    };

    setMessages((prev) => [...prev, userMessage]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    setTimeout(() => {
      const response = processAliceCommand(text.toLowerCase());
      const aliceMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: "alice",
        text: response,
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, aliceMessage]);

      // –û–∑–≤—É—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ê–ª–∏—Å—ã
      if (synthesis && !isSpeaking) {
        speakText(response);
      }
    }, 500);

    setInputText("");
  };

  const processAliceCommand = (text: string): string => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    for (const [command, action] of Object.entries(aliceCommands.navigation)) {
      if (text.includes(command)) {
        action();
        return `–û—Ç–∫—Ä—ã–≤–∞—é ${command}...`;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
    for (const [trigger, response] of Object.entries(aliceCommands.responses)) {
      if (text.includes(trigger)) {
        return response;
      }
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if (text.includes("—Ç–µ—Å—Ç") && text.includes("—Å–æ–∑–¥–∞—Ç—å")) {
      return userRole === "admin" || userRole === "teacher"
        ? '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–¢–µ—Å—Ç—ã" –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç".'
        : "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.";
    }

    if (text.includes("—Ä–µ–∑—É–ª—å—Ç–∞—Ç") || text.includes("–±–∞–ª–ª")) {
      return '–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–î–∞—à–±–æ—Ä–¥".';
    }

    if (text.includes("–∫—É—Ä—Å") && text.includes("–∑–∞–ø–∏—Å–∞—Ç—å—Å—è")) {
      return '–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—É—Ä—Å –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ö—É—Ä—Å—ã" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∫—É—Ä—Å.';
    }

    if (text.includes("–∑–∞–±—ã–ª") && text.includes("–ø–∞—Ä–æ–ª—å")) {
      return "–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.";
    }

    // –û–±—â–∏–π –æ—Ç–≤–µ—Ç
    return '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±—ã—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏: "–ø–æ–∫–∞–∂–∏ —Ç–µ—Å—Ç—ã", "–æ—Ç–∫—Ä–æ–π –∫—É—Ä—Å—ã", "–ø–æ–º–æ—â—å".';
  };

  const speakText = (text: string) => {
    if (synthesis) {
      synthesis.cancel(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ä–µ—á—å
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = "ru-RU";
      utterance.rate = 0.9;
      utterance.pitch = 1.1;

      utterance.onstart = () => setIsSpeaking(true);
      utterance.onend = () => setIsSpeaking(false);
      utterance.onerror = () => setIsSpeaking(false);

      synthesis.speak(utterance);
    }
  };

  const startListening = () => {
    if (recognition && !isListening) {
      setIsListening(true);
      recognition.start();
    }
  };

  const stopListening = () => {
    if (recognition && isListening) {
      recognition.stop();
      setIsListening(false);
    }
  };

  const toggleSpeech = () => {
    if (isSpeaking && synthesis) {
      synthesis.cancel();
      setIsSpeaking(false);
    }
  };

  return (
    <>
      {/* –ü–ª–∞–≤–∞—é—â–∞—è –∫–Ω–æ–ø–∫–∞ –ê–ª–∏—Å—ã */}
      <div className="fixed bottom-6 right-6 z-50">
        <Dialog open={isOpen} onOpenChange={setIsOpen}>
          <DialogTrigger asChild>
            <Button
              size="lg"
              className="h-14 w-14 rounded-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 shadow-lg hover:shadow-xl transition-all duration-300 animate-pulse"
            >
              <Icon name="Bot" size={24} className="text-white" />
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-md h-[600px] flex flex-col">
            <DialogHeader className="pb-4">
              <DialogTitle className="flex items-center space-x-2">
                <div className="p-2 bg-gradient-to-r from-purple-100 to-blue-100 rounded-full">
                  <Icon name="Bot" size={20} className="text-purple-600" />
                </div>
                <span>–ê–ª–∏—Å–∞ - AI –ü–æ–º–æ—â–Ω–∏–∫</span>
                <Badge variant="outline" className="ml-auto">
                  <Icon name="Sparkles" size={12} className="mr-1" />
                  –û–Ω–ª–∞–π–Ω
                </Badge>
              </DialogTitle>
            </DialogHeader>

            {/* –ß–∞—Ç */}
            <div className="flex-1 overflow-hidden flex flex-col">
              <div className="flex-1 overflow-y-auto space-y-3 pr-2">
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={`flex ${message.type === "user" ? "justify-end" : "justify-start"}`}
                  >
                    <div
                      className={`max-w-[80%] rounded-lg px-3 py-2 ${
                        message.type === "user"
                          ? "bg-blue-600 text-white"
                          : "bg-gray-100 text-gray-900"
                      }`}
                    >
                      <div className="flex items-center space-x-1 mb-1">
                        {message.type === "alice" && (
                          <Icon
                            name="Bot"
                            size={14}
                            className="text-purple-600"
                          />
                        )}
                        {message.isVoice && (
                          <Icon name="Mic" size={12} className="opacity-60" />
                        )}
                        <span className="text-xs opacity-60">
                          {message.timestamp.toLocaleTimeString([], {
                            hour: "2-digit",
                            minute: "2-digit",
                          })}
                        </span>
                      </div>
                      <p className="text-sm whitespace-pre-line">
                        {message.text}
                      </p>
                    </div>
                  </div>
                ))}
                <div ref={messagesEndRef} />
              </div>

              {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
              <div className="flex items-center space-x-2 pt-3 border-t">
                <Button
                  variant={isSpeaking ? "destructive" : "outline"}
                  size="sm"
                  onClick={toggleSpeech}
                  disabled={!synthesis}
                >
                  <Icon name={isSpeaking ? "VolumeX" : "Volume2"} size={16} />
                </Button>

                <Button
                  variant={isListening ? "destructive" : "outline"}
                  size="sm"
                  onClick={isListening ? stopListening : startListening}
                  disabled={!recognition}
                  className={isListening ? "animate-pulse" : ""}
                >
                  <Icon name={isListening ? "MicOff" : "Mic"} size={16} />
                </Button>

                <div className="flex-1 flex space-x-1">
                  <Textarea
                    value={inputText}
                    onChange={(e) => setInputText(e.target.value)}
                    placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
                    className="min-h-0 h-9 resize-none text-sm"
                    onKeyDown={(e) => {
                      if (e.key === "Enter" && !e.shiftKey) {
                        e.preventDefault();
                        if (inputText.trim()) {
                          handleUserMessage(inputText.trim());
                        }
                      }
                    }}
                  />
                  <Button
                    size="sm"
                    onClick={() =>
                      inputText.trim() && handleUserMessage(inputText.trim())
                    }
                    disabled={!inputText.trim()}
                  >
                    <Icon name="Send" size={16} />
                  </Button>
                </div>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </div>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
      {isListening && (
        <div className="fixed bottom-24 right-6 z-40">
          <Card className="p-3 bg-red-50 border-red-200">
            <div className="flex items-center space-x-2 text-red-600">
              <Icon name="Mic" size={16} className="animate-pulse" />
              <span className="text-sm font-medium">–°–ª—É—à–∞—é...</span>
            </div>
          </Card>
        </div>
      )}

      {isSpeaking && (
        <div className="fixed bottom-24 right-6 z-40">
          <Card className="p-3 bg-blue-50 border-blue-200">
            <div className="flex items-center space-x-2 text-blue-600">
              <Icon name="Volume2" size={16} className="animate-pulse" />
              <span className="text-sm font-medium">–ì–æ–≤–æ—Ä—é...</span>
            </div>
          </Card>
        </div>
      )}
    </>
  );
};

export default AliceAssistant;
