import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import Icon from "@/components/ui/icon";
import { getStatusColor, getStatusText } from "@/utils/statusUtils";
import { database } from "@/utils/database";
import { useState, useEffect } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";

export const TopEmployees = () => {
  const [employees, setEmployees] = useState<any[]>([]);
  const [topEmployees, setTopEmployees] = useState<any[]>([]);
  const [bottomEmployees, setBottomEmployees] = useState<any[]>([]);
  const [selectedEmployee, setSelectedEmployee] = useState<any>(null);
  const [isDialogOpen, setIsDialogOpen] = useState(false);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const loadEmployees = () => {
      const employeesData = database.getEmployees();
      const testsData = database.getTests();
      const totalAvailableTests = testsData.filter(t => t.status === 'published').length;
      
      setEmployees(employeesData);

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–Ω–µ –∞–¥–º–∏–Ω–æ–≤ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π)
      const onlyEmployees = employeesData.filter(emp => emp.role === 'employee');
      
      // –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–æ–≤
      const employeesWithTests = onlyEmployees.filter(emp => 
        emp.testResults && emp.testResults.length > 0
      );

      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–µ (–æ—Ç –ª—É—á—à–∏—Ö –∫ —Ö—É–¥—à–∏–º)
      const sortedByScore = [...employeesWithTests].sort((a, b) => 
        getTestScore(b) - getTestScore(a)
      );
      
      // –¢–æ–ø-3 –ª—É—á—à–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (—Å –ª—É—á—à–∏–º–∏ –±–∞–ª–ª–∞–º–∏)
      setTopEmployees(sortedByScore.slice(0, 3));
      
      // –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è:
      // 1. –° –Ω–∏–∑–∫–∏–º–∏ –±–∞–ª–ª–∞–º–∏ (< 60%)
      // 2. –ù–µ –ø—Ä–æ—à–µ–¥—à–∏–µ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
      // 3. –ü—Ä–æ—à–µ–¥—à–∏–µ –º–∞–ª–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
      const needAttention = onlyEmployees.filter(emp => {
        const testScore = getTestScore(emp);
        const completedTests = getCompletedTests(emp);
        
        // –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –≤–Ω–∏–º–∞–Ω–∏—è:
        return (
          completedTests === 0 || // –ù–µ –ø—Ä–æ—à–µ–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
          testScore < 60 || // –ù–∏–∑–∫–∏–π –±–∞–ª–ª
          (totalAvailableTests > 0 && completedTests < totalAvailableTests / 2) // –ü—Ä–æ—à–µ–ª –º–µ–Ω—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã
        );
      }).sort((a, b) => {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É: —Å–Ω–∞—á–∞–ª–∞ —Å –Ω–∏–∑–∫–∏–º–∏ –±–∞–ª–ª–∞–º–∏, –ø–æ—Ç–æ–º –±–µ–∑ —Ç–µ—Å—Ç–æ–≤
        const scoreA = getTestScore(a);
        const scoreB = getTestScore(b);
        const testsA = getCompletedTests(a);
        const testsB = getCompletedTests(b);
        
        // –ï—Å–ª–∏ –æ–±–∞ –±–µ–∑ —Ç–µ—Å—Ç–æ–≤ - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
        if (testsA === 0 && testsB === 0) return a.name.localeCompare(b.name);
        // –ï—Å–ª–∏ –æ–¥–∏–Ω –±–µ–∑ —Ç–µ—Å—Ç–æ–≤ - –æ–Ω –≤–∞–∂–Ω–µ–µ
        if (testsA === 0) return -1;
        if (testsB === 0) return 1;
        // –û–±–∞ —Å —Ç–µ—Å—Ç–∞–º–∏ - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–∞–ª–ª—É (—Ö—É–¥—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
        return scoreA - scoreB;
      });
      
      setBottomEmployees(needAttention.slice(0, 3));
    };

    loadEmployees();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(loadEmployees, 10000);
    
    return () => clearInterval(interval);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const getTestScore = (employee: any) => {
    if (!employee.testResults || employee.testResults.length === 0) return 0;
    const totalScore = employee.testResults.reduce((sum: number, test: any) => sum + test.score, 0);
    return Math.round(totalScore / employee.testResults.length);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
  const getCompletedTests = (employee: any) => {
    return employee.testResults ? employee.testResults.length : 0;
  };

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã, –ø–æ—á–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è
  const getAttentionReason = (employee: any) => {
    const testScore = getTestScore(employee);
    const completedTests = getCompletedTests(employee);
    const testsData = database.getTests();
    const totalAvailableTests = testsData.filter(t => t.status === 'published').length;
    
    if (completedTests === 0) {
      return { icon: 'XCircle', text: '–ù–µ –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç—ã', color: 'text-red-600' };
    }
    if (testScore < 40) {
      return { icon: 'TrendingDown', text: '–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –±–∞–ª–ª', color: 'text-red-600' };
    }
    if (testScore < 60) {
      return { icon: 'AlertTriangle', text: '–ù–∏–∑–∫–∏–π –±–∞–ª–ª', color: 'text-orange-600' };
    }
    if (totalAvailableTests > 0 && completedTests < totalAvailableTests / 2) {
      return { icon: 'Clock', text: '–ú–∞–ª–æ –ø—Ä–æ–π–¥–µ–Ω–æ', color: 'text-yellow-600' };
    }
    return { icon: 'Info', text: '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è', color: 'text-gray-600' };
  };

  const renderEmployeeItem = (employee: any, index: number, isTop: boolean) => {
    const testScore = getTestScore(employee);
    const completedTests = getCompletedTests(employee);
    const attentionReason = !isTop ? getAttentionReason(employee) : null;
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –º–µ–¥–∞–ª–∏ –¥–ª—è —Ç–æ–ø-3
    const getMedalIcon = (position: number) => {
      switch (position) {
        case 0: return "ü•á";
        case 1: return "ü•à";
        case 2: return "ü•â";
        default: return "";
      }
    };

    return (
      <div 
        key={employee.id} 
        className="flex items-center space-x-3 p-3 rounded-lg bg-gray-50 hover:bg-gray-100 transition-colors cursor-pointer"
        onClick={() => {
          setSelectedEmployee(employee);
          setIsDialogOpen(true);
        }}
      >
        <div className="flex items-center space-x-2">
          {isTop && (
            <span className="text-xl">{getMedalIcon(index)}</span>
          )}
          <div className="w-10 h-10 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center text-white font-medium">
            {employee.name.charAt(0)}
          </div>
        </div>
        <div className="flex-1">
          <p className="font-medium">{employee.name}</p>
          <p className="text-sm text-gray-500">{employee.department || '–ë–µ–∑ –æ—Ç–¥–µ–ª–∞'}</p>
          {!isTop && attentionReason && (
            <div className={`flex items-center mt-1 text-xs ${attentionReason.color}`}>
              <Icon name={attentionReason.icon as any} size={12} className="mr-1" />
              {attentionReason.text}
            </div>
          )}
        </div>
        <div className="text-right">
          <div className="flex items-center space-x-2">
            <Badge variant={testScore >= 80 ? "default" : testScore >= 60 ? "secondary" : "destructive"}>
              {testScore}%
            </Badge>
          </div>
          <div className="text-sm text-gray-500 mt-1">
            –¢–µ—Å—Ç–æ–≤: {completedTests}
          </div>
          <Progress value={testScore} className="w-16 mt-1" />
        </div>
      </div>
    );
  };

  return (
    <>
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* –¢–æ–ø-3 –ª—É—á—à–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ */}
        <Card className="bg-gradient-to-br from-green-50 to-emerald-50 border-green-200">
          <CardHeader>
            <CardTitle className="flex items-center text-green-700">
              <Icon name="Trophy" size={24} className="mr-2 text-green-600" />
              –õ—É—á—à–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {topEmployees.length > 0 ? (
                topEmployees.map((employee, index) => 
                  renderEmployeeItem(employee, index, true)
                )
              ) : (
                <div className="text-center py-8 text-gray-500">
                  <Icon name="Users" size={48} className="mx-auto mb-3 opacity-50" />
                  <p className="text-sm">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö</p>
                  <p className="text-xs mt-1">–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤</p>
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        {/* –¢–æ–ø-3 —Ö—É–¥—à–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ */}
        <Card className="bg-gradient-to-br from-red-50 to-pink-50 border-red-200">
          <CardHeader>
            <CardTitle className="flex items-center text-red-700">
              <Icon name="AlertTriangle" size={24} className="mr-2 text-red-600" />
              –¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {bottomEmployees.length > 0 ? (
                bottomEmployees.map((employee, index) => 
                  renderEmployeeItem(employee, index, false)
                )
              ) : (
                <div className="text-center py-8 text-gray-500">
                  <Icon name="CheckCircle" size={48} className="mx-auto mb-3 opacity-50 text-green-500" />
                  <p className="text-sm">–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!</p>
                  <p className="text-xs mt-1">–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ—Å–æ–±–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è</p>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π */}
      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent className="max-w-3xl max-h-[90vh] overflow-y-auto">
          {selectedEmployee && (
            <>
              <DialogHeader>
                <div className="flex items-center space-x-4">
                  <div className="w-16 h-16 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center text-white text-2xl font-medium">
                    {selectedEmployee.name.charAt(0)}
                  </div>
                  <div className="flex-1">
                    <DialogTitle className="text-2xl">{selectedEmployee.name}</DialogTitle>
                    <DialogDescription className="text-base">
                      {selectedEmployee.position} ‚Ä¢ {selectedEmployee.department || '–ë–µ–∑ –æ—Ç–¥–µ–ª–∞'}
                    </DialogDescription>
                  </div>
                  <Badge variant={getTestScore(selectedEmployee) >= 80 ? "default" : getTestScore(selectedEmployee) >= 60 ? "secondary" : "destructive"} className="text-lg px-4 py-2">
                    {getTestScore(selectedEmployee)}%
                  </Badge>
                </div>
              </DialogHeader>

              <div className="space-y-6 mt-6">
                {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                <div>
                  <h3 className="text-lg font-semibold mb-3 flex items-center">
                    <Icon name="BarChart3" size={20} className="mr-2" />
                    –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                  </h3>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <Card>
                      <CardContent className="pt-6">
                        <div className="text-center">
                          <div className="text-3xl font-bold text-blue-600">{getCompletedTests(selectedEmployee)}</div>
                          <div className="text-sm text-gray-500 mt-1">–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤</div>
                        </div>
                      </CardContent>
                    </Card>
                    <Card>
                      <CardContent className="pt-6">
                        <div className="text-center">
                          <div className="text-3xl font-bold text-green-600">{getTestScore(selectedEmployee)}%</div>
                          <div className="text-sm text-gray-500 mt-1">–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</div>
                        </div>
                      </CardContent>
                    </Card>
                    <Card>
                      <CardContent className="pt-6">
                        <div className="text-center">
                          <Badge className={`${getStatusColor(selectedEmployee.status)} text-white`}>
                            {getStatusText(selectedEmployee.status)}
                          </Badge>
                          <div className="text-sm text-gray-500 mt-2">–°—Ç–∞—Ç—É—Å</div>
                        </div>
                      </CardContent>
                    </Card>
                    <Card>
                      <CardContent className="pt-6">
                        <div className="text-center">
                          <div className="text-3xl font-bold text-purple-600">
                            {selectedEmployee.testResults?.reduce((sum: number, test: any) => sum + test.timeSpent, 0) || 0}
                          </div>
                          <div className="text-sm text-gray-500 mt-1">–ú–∏–Ω—É—Ç –Ω–∞ —Ç–µ—Å—Ç—ã</div>
                        </div>
                      </CardContent>
                    </Card>
                  </div>
                </div>

                {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–µ—Å—Ç–∞–º */}
                <div>
                  <h3 className="text-lg font-semibold mb-3 flex items-center">
                    <Icon name="FileText" size={20} className="mr-2" />
                    –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–µ—Å—Ç–∞–º
                  </h3>
                  {selectedEmployee.testResults && selectedEmployee.testResults.length > 0 ? (
                    <div className="space-y-3">
                      {selectedEmployee.testResults.map((result: any, index: number) => {
                        const tests = database.getTests();
                        const test = tests.find(t => t.id === result.id.toString());
                        return (
                          <Card key={index} className="hover:shadow-md transition-shadow">
                            <CardContent className="p-4">
                              <div className="flex items-center justify-between">
                                <div className="flex-1">
                                  <div className="flex items-center space-x-2">
                                    <Icon name="FileCheck" size={16} className="text-blue-500" />
                                    <p className="font-medium">{test?.title || `–¢–µ—Å—Ç #${result.id}`}</p>
                                  </div>
                                  <div className="flex items-center space-x-4 mt-2 text-sm text-gray-500">
                                    <span className="flex items-center">
                                      <Icon name="Clock" size={14} className="mr-1" />
                                      {result.timeSpent} –º–∏–Ω
                                    </span>
                                    {test?.category && (
                                      <Badge variant="outline" className="text-xs">{test.category}</Badge>
                                    )}
                                  </div>
                                </div>
                                <div className="text-right ml-4">
                                  <div className="flex items-center space-x-2">
                                    <Progress value={result.score} className="w-24" />
                                    <Badge variant={result.score >= 80 ? "default" : result.score >= 60 ? "secondary" : "destructive"}>
                                      {result.score}%
                                    </Badge>
                                  </div>
                                </div>
                              </div>
                            </CardContent>
                          </Card>
                        );
                      })}
                    </div>
                  ) : (
                    <Card>
                      <CardContent className="p-8 text-center text-gray-500">
                        <Icon name="FileX" size={48} className="mx-auto mb-3 opacity-50" />
                        <p>–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞</p>
                      </CardContent>
                    </Card>
                  )}
                </div>

                {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
                {getTestScore(selectedEmployee) < 70 && (
                  <div>
                    <h3 className="text-lg font-semibold mb-3 flex items-center text-orange-600">
                      <Icon name="Lightbulb" size={20} className="mr-2" />
                      –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    </h3>
                    <Card className="bg-orange-50 border-orange-200">
                      <CardContent className="p-4">
                        <ul className="space-y-2 text-sm">
                          {getCompletedTests(selectedEmployee) === 0 && (
                            <li className="flex items-start">
                              <Icon name="ArrowRight" size={16} className="mr-2 mt-0.5 text-orange-600" />
                              <span>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏–π</span>
                            </li>
                          )}
                          {getTestScore(selectedEmployee) < 60 && getCompletedTests(selectedEmployee) > 0 && (
                            <>
                              <li className="flex items-start">
                                <Icon name="ArrowRight" size={16} className="mr-2 mt-0.5 text-orange-600" />
                                <span>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ —Å–ª–∞–±—ã–º —Ç–µ–º–∞–º</span>
                              </li>
                              <li className="flex items-start">
                                <Icon name="ArrowRight" size={16} className="mr-2 mt-0.5 text-orange-600" />
                                <span>–ù–∞–∑–Ω–∞—á–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –≤—Å—Ç—Ä–µ—á—É —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º</span>
                              </li>
                            </>
                          )}
                          {getTestScore(selectedEmployee) >= 60 && getTestScore(selectedEmployee) < 70 && (
                            <li className="flex items-start">
                              <Icon name="ArrowRight" size={16} className="mr-2 mt-0.5 text-orange-600" />
                              <span>–ü—Ä–æ–≥—Ä–µ—Å—Å –µ—Å—Ç—å, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</span>
                            </li>
                          )}
                        </ul>
                      </CardContent>
                    </Card>
                  </div>
                )}
              </div>
            </>
          )}
        </DialogContent>
      </Dialog>
    </>
  );
};