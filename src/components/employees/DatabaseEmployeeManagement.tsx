import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import Icon from '@/components/ui/icon';
import { toast } from 'sonner';
import { databaseService, DatabaseEmployee } from '@/utils/databaseService';
import NotificationForm from '@/components/notifications/NotificationForm';

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–æ–≤
const getInitials = (name: string | null | undefined): string => {
  if (!name || typeof name !== 'string') {
    return '??';
  }
  
  try {
    return name.split(' ')
      .filter(n => n && n.length > 0)
      .map(n => n.charAt(0))
      .join('')
      .slice(0, 2)
      .toUpperCase() || '??';
  } catch {
    return '??';
  }
};

const DatabaseEmployeeManagement: React.FC = () => {
  const [employees, setEmployees] = useState<DatabaseEmployee[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedEmployee, setSelectedEmployee] = useState<DatabaseEmployee | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [isNotificationFormOpen, setIsNotificationFormOpen] = useState(false);
  const [selectedEmployeeForNotification, setSelectedEmployeeForNotification] = useState<DatabaseEmployee | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedDepartment, setSelectedDepartment] = useState('all');
  const [selectedRole, setSelectedRole] = useState('all');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isPasswordDialogOpen, setIsPasswordDialogOpen] = useState(false);
  const [editingEmployee, setEditingEmployee] = useState<DatabaseEmployee | null>(null);
  
  // –§–æ—Ä–º—ã
  const [newEmployeeForm, setNewEmployeeForm] = useState({
    full_name: '',
    email: '',
    phone: '',
    position: '',
    department: '',
    role: 'employee' as 'admin' | 'teacher' | 'employee',
    password: ''
  });
  
  const [editForm, setEditForm] = useState({
    full_name: '',
    email: '',
    phone: '',
    position: '',
    department: '',
    role: 'employee' as 'admin' | 'teacher' | 'employee',
    is_active: true
  });
  
  const [passwordForm, setPasswordForm] = useState({
    newPassword: '',
    confirmPassword: ''
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –ë–î
  const loadEmployees = async () => {
    setIsLoading(true);
    try {
      const employeeData = await databaseService.getEmployees();
      setEmployees(employeeData);
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤');
      console.error('Error loading employees:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  const handleAddEmployee = async () => {
    if (!newEmployeeForm.full_name || !newEmployeeForm.email || !newEmployeeForm.password) {
      toast.error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      return;
    }

    try {
      const newEmployee = {
        ...newEmployeeForm,
        is_active: true,
        created_at: new Date().toISOString()
      };

      const result = await databaseService.addEmployee(newEmployee);
      if (result) {
        await loadEmployees();
        setIsAddDialogOpen(false);
        resetNewEmployeeForm();
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ email —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –≤—Ö–æ–¥–∞
        await sendWelcomeEmail(newEmployeeForm.email, newEmployeeForm.email, newEmployeeForm.password);
        
        toast.success(`–°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${newEmployeeForm.full_name} –¥–æ–±–∞–≤–ª–µ–Ω. –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ email.`);
      } else {
        toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞');
      }
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞');
      console.error('Error adding employee:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  const handleEditEmployee = (employee: DatabaseEmployee) => {
    setEditingEmployee(employee);
    setEditForm({
      full_name: employee.full_name || '',
      email: employee.email || '',
      phone: employee.phone || '',
      position: employee.position || '',
      department: employee.department || '',
      role: employee.role || 'employee',
      is_active: employee.is_active
    });
    setIsEditDialogOpen(true);
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  const handleSaveEditEmployee = async () => {
    if (!editingEmployee) return;

    try {
      const updatedEmployee = {
        ...editingEmployee,
        ...editForm,
        updated_at: new Date().toISOString()
      };

      const result = await databaseService.updateEmployee(editingEmployee.id, updatedEmployee);
      if (result) {
        await loadEmployees();
        setIsEditDialogOpen(false);
        setEditingEmployee(null);
        toast.success('–î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      } else {
        toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
      }
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
      console.error('Error updating employee:', error);
    }
  };

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
  const handleChangePassword = async () => {
    if (!selectedEmployee) return;

    if (passwordForm.newPassword !== passwordForm.confirmPassword) {
      toast.error('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      return;
    }

    if (passwordForm.newPassword.length < 6) {
      toast.error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
      return;
    }

    try {
      const result = await databaseService.updateEmployeePassword(selectedEmployee.id, passwordForm.newPassword);
      if (result) {
        setIsPasswordDialogOpen(false);
        setSelectedEmployee(null);
        setPasswordForm({ newPassword: '', confirmPassword: '' });
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è –Ω–∞ email
        await sendPasswordChangeEmail(selectedEmployee.email, passwordForm.newPassword);
        
        toast.success('–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞');
      } else {
        toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è');
      }
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è');
      console.error('Error changing password:', error);
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ email
  const sendWelcomeEmail = async (email: string, login: string, password: string) => {
    try {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É email —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const emailContent = `
üìß –î–ê–ù–ù–´–ï –î–õ–Ø –í–•–û–î–ê
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üë§ –õ–æ–≥–∏–Ω: ${login}
üîê –ü–∞—Ä–æ–ª—å: ${password}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìå –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞: ${email}
‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
      `;
      
      console.log('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ:', emailContent);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      toast.success(`–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${email}`, {
        description: '–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É',
        duration: 5000,
      });
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ API –æ—Ç–ø—Ä–∞–≤–∫–∏ email
      // await fetch('/api/send-email', { method: 'POST', body: JSON.stringify({...}) })
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
      toast.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email');
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
  const sendPasswordChangeEmail = async (email: string, newPassword: string) => {
    try {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É email —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const emailContent = `
üìß –ü–ê–†–û–õ–¨ –ò–ó–ú–ï–ù–ï–ù
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üîê –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ${newPassword}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìå –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞: ${email}
‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
      `;
      
      console.log('–ü–∏—Å—å–º–æ –æ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è:', emailContent);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      toast.success(`–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${email}`, {
        description: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ–ª—É—á–∏—Ç –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –Ω–∞ email',
        duration: 5000,
      });
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ API –æ—Ç–ø—Ä–∞–≤–∫–∏ email
      // await fetch('/api/send-email', { method: 'POST', body: JSON.stringify({...}) })
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
      toast.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email');
    }
  };

  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  const resetNewEmployeeForm = () => {
    setNewEmployeeForm({
      full_name: '',
      email: '',
      phone: '',
      position: '',
      department: '',
      role: 'employee',
      password: ''
    });
  };

  useEffect(() => {
    loadEmployees();
  }, []);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
  const filteredEmployees = employees.filter(employee => {
    if (!employee) return false; // –î–æ–±–∞–≤–∏–º –∑–∞—â–∏—Ç—É –æ—Ç null/undefined —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    
    const matchesSearch = !searchQuery || 
      (employee.full_name && employee.full_name.toLowerCase().includes(searchQuery.toLowerCase())) ||
      (employee.email && employee.email.toLowerCase().includes(searchQuery.toLowerCase())) ||
      (employee.department && employee.department.toLowerCase().includes(searchQuery.toLowerCase()));
    
    const matchesDepartment = selectedDepartment === 'all' || employee.department === selectedDepartment;
    const matchesRole = selectedRole === 'all' || employee.role === selectedRole;
    
    return matchesSearch && matchesDepartment && matchesRole && employee.is_active;
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤ –∏ —Ä–æ–ª–µ–π
  const departments = [...new Set(employees.map(emp => emp.department).filter(Boolean))];
  const roles = [...new Set(employees.map(emp => emp.role).filter(Boolean))];

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  const handleDeleteEmployee = async () => {
    if (!selectedEmployee) return;
    
    try {
      await databaseService.deleteEmployee(selectedEmployee.id);
      toast.success(`–°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${selectedEmployee.full_name} —É–¥–∞–ª–µ–Ω`);
      await loadEmployees(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
      setIsDeleteDialogOpen(false);
      setSelectedEmployee(null);
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞');
      console.error('Error deleting employee:', error);
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const handleSendNotification = (employee: DatabaseEmployee) => {
    setSelectedEmployeeForNotification(employee);
    setIsNotificationFormOpen(true);
  };

  const handleCloseNotificationForm = () => {
    setIsNotificationFormOpen(false);
    setSelectedEmployeeForNotification(null);
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="flex items-center space-x-2">
          <Icon name="Loader2" size={24} className="animate-spin" />
          <span>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...</span>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏</h2>
          <p className="text-gray-600">–î–∞–Ω–Ω—ã–µ –∏–∑ PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</p>
        </div>
        <div className="flex items-center space-x-4">
          <Badge variant="outline" className="flex items-center space-x-1">
            <Icon name="Database" size={14} />
            <span>{employees.length} –≤—Å–µ–≥–æ</span>
          </Badge>
          <Badge variant="default" className="flex items-center space-x-1">
            <Icon name="Users" size={14} />
            <span>{filteredEmployees.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö</span>
          </Badge>
          <Button onClick={loadEmployees} variant="outline" size="sm">
            <Icon name="RefreshCw" size={16} className="mr-1" />
            –û–±–Ω–æ–≤–∏—Ç—å
          </Button>
          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>
            <DialogTrigger asChild>
              <Button className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700">
                <Icon name="UserPlus" size={16} className="mr-2" />
                –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
              </Button>
            </DialogTrigger>
          </Dialog>
        </div>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Icon name="Filter" size={20} />
            <span>–§–∏–ª—å—Ç—Ä—ã</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium mb-1">–ü–æ–∏—Å–∫</label>
              <div className="relative">
                <Icon name="Search" size={16} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                <input
                  type="text"
                  placeholder="–ò–º—è, email, –æ—Ç–¥–µ–ª..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10 w-full p-2 border rounded-md"
                />
              </div>
            </div>
            
            <div>
              <label className="block text-sm font-medium mb-1">–û—Ç–¥–µ–ª</label>
              <select
                value={selectedDepartment}
                onChange={(e) => setSelectedDepartment(e.target.value)}
                className="w-full p-2 border rounded-md"
              >
                <option value="all">–í—Å–µ –æ—Ç–¥–µ–ª—ã</option>
                {departments.map(dept => (
                  <option key={dept} value={dept}>{dept}</option>
                ))}
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium mb-1">–†–æ–ª—å</label>
              <select
                value={selectedRole}
                onChange={(e) => setSelectedRole(e.target.value)}
                className="w-full p-2 border rounded-md"
              >
                <option value="all">–í—Å–µ —Ä–æ–ª–∏</option>
                {roles.map(role => (
                  <option key={role} value={role}>
                    {role === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : 
                     role === 'teacher' ? '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å' : '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'}
                  </option>
                ))}
              </select>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ */}
      <Card>
        <CardHeader>
          <CardTitle>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ ({filteredEmployees.length})</CardTitle>
          <CardDescription>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {filteredEmployees.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                <Icon name="Users" size={48} className="mx-auto mb-4 opacity-50" />
                <p>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                <p className="text-sm">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏</p>
              </div>
            ) : (
              filteredEmployees.map((employee) => (
                <div
                  key={employee.id}
                  className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 transition-colors"
                >
                  <div className="flex items-center space-x-4">
                    <div className="flex items-center justify-center w-12 h-12 bg-blue-100 rounded-full">
                      <span className="text-lg font-medium text-blue-600">
                        {getInitials(employee.full_name)}
                      </span>
                    </div>
                    <div>
                      <div className="font-medium text-lg">{employee.full_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
                      <div className="text-sm text-gray-500">
                        {employee.position || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} ‚Ä¢ {employee.department || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                      </div>
                      <div className="text-xs text-gray-400 flex items-center space-x-2">
                        <Icon name="Mail" size={12} />
                        <span>{employee.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
                        {employee.phone && (
                          <>
                            <span>‚Ä¢</span>
                            <Icon name="Phone" size={12} />
                            <span>{employee.phone}</span>
                          </>
                        )}
                      </div>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-3">
                    <Badge 
                      variant={employee.role === 'admin' ? 'destructive' : 
                               employee.role === 'teacher' ? 'default' : 'secondary'}
                    >
                      {employee.role === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : 
                       employee.role === 'teacher' ? '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å' : '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'}
                    </Badge>
                    
                    <div className="flex items-center space-x-1">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleEditEmployee(employee)}
                        className="text-blue-600 hover:text-blue-700"
                        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                      >
                        <Icon name="Edit" size={14} />
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => {
                          setSelectedEmployee(employee);
                          setIsPasswordDialogOpen(true);
                        }}
                        className="text-green-600 hover:text-green-700"
                        title="–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å"
                      >
                        <Icon name="Key" size={14} />
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleSendNotification(employee)}
                        className="text-purple-600 hover:text-purple-700"
                        title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
                      >
                        <Icon name="Send" size={14} />
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => {
                          setSelectedEmployee(employee);
                          setIsDeleteDialogOpen(true);
                        }}
                        className="text-red-600 hover:text-red-700"
                        title="–£–¥–∞–ª–∏—Ç—å"
                      >
                        <Icon name="Trash2" size={14} />
                      </Button>
                    </div>
                  </div>
                </div>
              ))
            )}
          </div>
        </CardContent>
      </Card>

      {/* –î–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω–∏—è */}
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?</AlertDialogTitle>
            <AlertDialogDescription>
              –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {selectedEmployee?.full_name}? 
              –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>–û—Ç–º–µ–Ω–∞</AlertDialogCancel>
            <AlertDialogAction onClick={handleDeleteEmployee} className="bg-red-600 hover:bg-red-700">
              –£–¥–∞–ª–∏—Ç—å
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ */}
      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</DialogTitle>
            <DialogDescription>
              –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email.
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label htmlFor="full_name">–ü–æ–ª–Ω–æ–µ –∏–º—è *</Label>
              <Input
                id="full_name"
                value={newEmployeeForm.full_name}
                onChange={(e) => setNewEmployeeForm(prev => ({...prev, full_name: e.target.value}))}
                placeholder="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
              />
            </div>
            <div>
              <Label htmlFor="email">Email *</Label>
              <Input
                id="email"
                type="email"
                value={newEmployeeForm.email}
                onChange={(e) => setNewEmployeeForm(prev => ({...prev, email: e.target.value}))}
                placeholder="ivan@company.com"
              />
            </div>
            <div>
              <Label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω</Label>
              <Input
                id="phone"
                value={newEmployeeForm.phone}
                onChange={(e) => setNewEmployeeForm(prev => ({...prev, phone: e.target.value}))}
                placeholder="+7 (999) 123-45-67"
              />
            </div>
            <div>
              <Label htmlFor="position">–î–æ–ª–∂–Ω–æ—Å—Ç—å</Label>
              <Input
                id="position"
                value={newEmployeeForm.position}
                onChange={(e) => setNewEmployeeForm(prev => ({...prev, position: e.target.value}))}
                placeholder="–ú–µ–Ω–µ–¥–∂–µ—Ä"
              />
            </div>
            <div>
              <Label htmlFor="department">–û—Ç–¥–µ–ª</Label>
              <Input
                id="department"
                value={newEmployeeForm.department}
                onChange={(e) => setNewEmployeeForm(prev => ({...prev, department: e.target.value}))}
                placeholder="IT –æ—Ç–¥–µ–ª"
              />
            </div>
            <div>
              <Label htmlFor="role">–†–æ–ª—å</Label>
              <Select value={newEmployeeForm.role} onValueChange={(value: 'admin' | 'teacher' | 'employee') => setNewEmployeeForm(prev => ({...prev, role: value}))}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="employee">–°–æ—Ç—Ä—É–¥–Ω–∏–∫</SelectItem>
                  <SelectItem value="teacher">–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</SelectItem>
                  <SelectItem value="admin">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="password">–ü–∞—Ä–æ–ª—å *</Label>
              <Input
                id="password"
                type="password"
                value={newEmployeeForm.password}
                onChange={(e) => setNewEmployeeForm(prev => ({...prev, password: e.target.value}))}
                placeholder="–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
              />
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsAddDialogOpen(false)}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button onClick={handleAddEmployee}>
              –î–æ–±–∞–≤–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* –î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</DialogTitle>
            <DialogDescription>
              –ò–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label htmlFor="edit_full_name">–ü–æ–ª–Ω–æ–µ –∏–º—è</Label>
              <Input
                id="edit_full_name"
                value={editForm.full_name}
                onChange={(e) => setEditForm(prev => ({...prev, full_name: e.target.value}))}
              />
            </div>
            <div>
              <Label htmlFor="edit_email">Email</Label>
              <Input
                id="edit_email"
                type="email"
                value={editForm.email}
                onChange={(e) => setEditForm(prev => ({...prev, email: e.target.value}))}
              />
            </div>
            <div>
              <Label htmlFor="edit_phone">–¢–µ–ª–µ—Ñ–æ–Ω</Label>
              <Input
                id="edit_phone"
                value={editForm.phone}
                onChange={(e) => setEditForm(prev => ({...prev, phone: e.target.value}))}
              />
            </div>
            <div>
              <Label htmlFor="edit_position">–î–æ–ª–∂–Ω–æ—Å—Ç—å</Label>
              <Input
                id="edit_position"
                value={editForm.position}
                onChange={(e) => setEditForm(prev => ({...prev, position: e.target.value}))}
              />
            </div>
            <div>
              <Label htmlFor="edit_department">–û—Ç–¥–µ–ª</Label>
              <Input
                id="edit_department"
                value={editForm.department}
                onChange={(e) => setEditForm(prev => ({...prev, department: e.target.value}))}
              />
            </div>
            <div>
              <Label htmlFor="edit_role">–†–æ–ª—å</Label>
              <Select value={editForm.role} onValueChange={(value: 'admin' | 'teacher' | 'employee') => setEditForm(prev => ({...prev, role: value}))}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="employee">–°–æ—Ç—Ä—É–¥–Ω–∏–∫</SelectItem>
                  <SelectItem value="teacher">–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</SelectItem>
                  <SelectItem value="admin">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="flex items-center space-x-2">
              <input
                type="checkbox"
                id="is_active"
                checked={editForm.is_active}
                onChange={(e) => setEditForm(prev => ({...prev, is_active: e.target.checked}))}
                className="w-4 h-4"
              />
              <Label htmlFor="is_active">–ê–∫—Ç–∏–≤–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫</Label>
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsEditDialogOpen(false)}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button onClick={handleSaveEditEmployee}>
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* –î–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è */}
      <Dialog open={isPasswordDialogOpen} onOpenChange={setIsPasswordDialogOpen}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å</DialogTitle>
            <DialogDescription>
              –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –Ω–∞ email: {selectedEmployee?.email}
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label htmlFor="new_password">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</Label>
              <Input
                id="new_password"
                type="password"
                value={passwordForm.newPassword}
                onChange={(e) => setPasswordForm(prev => ({...prev, newPassword: e.target.value}))}
                placeholder="–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
              />
            </div>
            <div>
              <Label htmlFor="confirm_password">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</Label>
              <Input
                id="confirm_password"
                type="password"
                value={passwordForm.confirmPassword}
                onChange={(e) => setPasswordForm(prev => ({...prev, confirmPassword: e.target.value}))}
                placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
              />
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsPasswordDialogOpen(false)}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button onClick={handleChangePassword}>
              –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* –§–æ—Ä–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
      {isNotificationFormOpen && selectedEmployeeForNotification && (
        <NotificationForm
          isOpen={isNotificationFormOpen}
          onClose={handleCloseNotificationForm}
          employees={employees.map(emp => databaseService.convertToOldEmployee(emp))}
          selectedEmployee={databaseService.convertToOldEmployee(selectedEmployeeForNotification)}
          currentUserRole="admin"
        />
      )}
    </div>
  );
};

export default DatabaseEmployeeManagement;