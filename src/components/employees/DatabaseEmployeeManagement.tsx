import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';
import Icon from '@/components/ui/icon';
import { toast } from 'sonner';
import { DatabaseEmployee } from '@/utils/databaseService';
import { externalDb } from '@/services/externalDbService';
import NotificationForm from '@/components/notifications/NotificationForm';

// –ò–º–ø–æ—Ä—Ç—ã –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import { EmployeeHeader } from './EmployeeHeader';
import { DatabaseEmployeeFilters } from './DatabaseEmployeeFilters';
import { DatabaseEmployeeCard } from './DatabaseEmployeeCard';
import { DatabaseEmployeeDialogs } from './DatabaseEmployeeDialogs';

const DatabaseEmployeeManagement: React.FC = () => {
  const [employees, setEmployees] = useState<DatabaseEmployee[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedEmployee, setSelectedEmployee] = useState<DatabaseEmployee | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [isNotificationFormOpen, setIsNotificationFormOpen] = useState(false);
  const [selectedEmployeeForNotification, setSelectedEmployeeForNotification] = useState<DatabaseEmployee | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedDepartment, setSelectedDepartment] = useState('all');
  const [selectedRole, setSelectedRole] = useState('all');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isPasswordDialogOpen, setIsPasswordDialogOpen] = useState(false);
  const [editingEmployee, setEditingEmployee] = useState<DatabaseEmployee | null>(null);
  
  // –§–æ—Ä–º—ã
  const [newEmployeeForm, setNewEmployeeForm] = useState({
    full_name: '',
    email: '',
    phone: '',
    position: '',
    department: '',
    role: 'employee' as 'admin' | 'teacher' | 'employee',
    password: ''
  });
  
  const [editForm, setEditForm] = useState({
    full_name: '',
    email: '',
    phone: '',
    position: '',
    department: '',
    role: 'employee' as 'admin' | 'teacher' | 'employee',
    is_active: true
  });
  
  const [passwordForm, setPasswordForm] = useState({
    newPassword: '',
    confirmPassword: ''
  });

  useEffect(() => {
    loadEmployees();
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –ë–î
  const loadEmployees = async () => {
    setIsLoading(true);
    try {
      const employeeData = await externalDb.getEmployees();
      setEmployees(employeeData);
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤');
      console.error('Error loading employees:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  const handleAddEmployee = async () => {
    if (!newEmployeeForm.full_name || !newEmployeeForm.email || !newEmployeeForm.password) {
      toast.error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      return;
    }

    try {
      const newEmployee = {
        ...newEmployeeForm,
        is_active: true,
        created_at: new Date().toISOString()
      };

      const result = await externalDb.addEmployee(newEmployee);
      if (result) {
        await loadEmployees();
        setIsAddDialogOpen(false);
        resetNewEmployeeForm();
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ email —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –≤—Ö–æ–¥–∞
        await sendWelcomeEmail(newEmployeeForm.email, newEmployeeForm.email, newEmployeeForm.password);
        
        toast.success(`–°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${newEmployeeForm.full_name} –¥–æ–±–∞–≤–ª–µ–Ω. –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ email.`);
      } else {
        toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞');
      }
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞');
      console.error('Error adding employee:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  const handleEditEmployee = (employee: DatabaseEmployee) => {
    setEditingEmployee(employee);
    setEditForm({
      full_name: employee.full_name || '',
      email: employee.email || '',
      phone: employee.phone || '',
      position: employee.position || '',
      department: employee.department || '',
      role: employee.role || 'employee',
      is_active: employee.is_active
    });
    setIsEditDialogOpen(true);
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  const handleSaveEditEmployee = async () => {
    if (!editingEmployee) return;

    try {
      const updatedEmployee = {
        ...editingEmployee,
        ...editForm,
        updated_at: new Date().toISOString()
      };

      const result = await externalDb.updateEmployee(editingEmployee.id, updatedEmployee);
      if (result) {
        await loadEmployees();
        setIsEditDialogOpen(false);
        setEditingEmployee(null);
        toast.success('–î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      } else {
        toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
      }
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
      console.error('Error updating employee:', error);
    }
  };

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
  const handleChangePassword = async () => {
    if (!selectedEmployee) return;

    if (passwordForm.newPassword !== passwordForm.confirmPassword) {
      toast.error('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      return;
    }

    if (passwordForm.newPassword.length < 6) {
      toast.error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
      return;
    }

    try {
      const result = await externalDb.updateEmployeePassword(selectedEmployee.id, passwordForm.newPassword);
      if (result) {
        setIsPasswordDialogOpen(false);
        setSelectedEmployee(null);
        setPasswordForm({ newPassword: '', confirmPassword: '' });
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è –Ω–∞ email
        await sendPasswordChangeEmail(selectedEmployee.email, passwordForm.newPassword);
        
        toast.success('–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞');
      } else {
        toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è');
      }
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è');
      console.error('Error changing password:', error);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  const handleDeleteEmployee = async () => {
    if (!selectedEmployee) return;
    
    try {
      await externalDb.deleteEmployee(selectedEmployee.id);
      toast.success(`–°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${selectedEmployee.full_name} —É–¥–∞–ª–µ–Ω`);
      await loadEmployees();
      setIsDeleteDialogOpen(false);
      setSelectedEmployee(null);
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞');
      console.error('Error deleting employee:', error);
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const handleSendNotification = (employee: DatabaseEmployee) => {
    setSelectedEmployeeForNotification(employee);
    setIsNotificationFormOpen(true);
  };

  const handleCloseNotificationForm = () => {
    setIsNotificationFormOpen(false);
    setSelectedEmployeeForNotification(null);
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ email
  const sendWelcomeEmail = async (email: string, login: string, password: string) => {
    try {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É email —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const emailContent = `
üìß –î–ê–ù–ù–´–ï –î–õ–Ø –í–•–û–î–ê
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üë§ –õ–æ–≥–∏–Ω: ${login}
üîê –ü–∞—Ä–æ–ª—å: ${password}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìå –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞: ${email}
‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
      `;
      
      console.log('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ:', emailContent);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      toast.success(`–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${email}`, {
        description: '–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É',
        duration: 5000,
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
      toast.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email');
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
  const sendPasswordChangeEmail = async (email: string, newPassword: string) => {
    try {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É email —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const emailContent = `
üìß –ü–ê–†–û–õ–¨ –ò–ó–ú–ï–ù–ï–ù
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üîê –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ${newPassword}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìå –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞: ${email}
‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
      `;
      
      console.log('–ü–∏—Å—å–º–æ –æ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è:', emailContent);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      toast.success(`–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${email}`, {
        description: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ–ª—É—á–∏—Ç –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –Ω–∞ email',
        duration: 5000,
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
      toast.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email');
    }
  };

  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  const resetNewEmployeeForm = () => {
    setNewEmployeeForm({
      full_name: '',
      email: '',
      phone: '',
      position: '',
      department: '',
      role: 'employee',
      password: ''
    });
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
  const filteredEmployees = employees.filter(employee => {
    if (!employee) return false; // –î–æ–±–∞–≤–∏–º –∑–∞—â–∏—Ç—É –æ—Ç null/undefined —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    
    const matchesSearch = !searchQuery || 
      (employee.full_name && employee.full_name.toLowerCase().includes(searchQuery.toLowerCase())) ||
      (employee.email && employee.email.toLowerCase().includes(searchQuery.toLowerCase())) ||
      (employee.department && employee.department.toLowerCase().includes(searchQuery.toLowerCase()));
    
    const matchesDepartment = selectedDepartment === 'all' || employee.department === selectedDepartment;
    const matchesRole = selectedRole === 'all' || employee.role === selectedRole;
    
    return matchesSearch && matchesDepartment && matchesRole && employee.is_active;
  });

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="flex items-center space-x-2">
          <Icon name="Loader2" size={24} className="animate-spin" />
          <span>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...</span>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <EmployeeHeader 
        employees={employees}
        filteredEmployees={filteredEmployees}
        onRefresh={loadEmployees}
        isAddDialogOpen={isAddDialogOpen}
        setIsAddDialogOpen={setIsAddDialogOpen}
      />

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <DatabaseEmployeeFilters
        searchQuery={searchQuery}
        setSearchQuery={setSearchQuery}
        selectedDepartment={selectedDepartment}
        setSelectedDepartment={setSelectedDepartment}
        selectedRole={selectedRole}
        setSelectedRole={setSelectedRole}
        employees={employees}
      />

      {/* –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ */}
      <Card>
        <CardHeader>
          <CardTitle>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ ({filteredEmployees.length})</CardTitle>
          <CardDescription>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {filteredEmployees.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                <Icon name="Users" size={48} className="mx-auto mb-4 opacity-50" />
                <p>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                <p className="text-sm">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏</p>
              </div>
            ) : (
              filteredEmployees.map((employee) => (
                <DatabaseEmployeeCard
                  key={employee.id}
                  employee={employee}
                  onEdit={handleEditEmployee}
                  onChangePassword={(emp) => {
                    setSelectedEmployee(emp);
                    setIsPasswordDialogOpen(true);
                  }}
                  onSendNotification={handleSendNotification}
                  onDelete={(emp) => {
                    setSelectedEmployee(emp);
                    setIsDeleteDialogOpen(true);
                  }}
                />
              ))
            )}
          </div>
        </CardContent>
      </Card>

      {/* –î–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω–∏—è */}
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?</AlertDialogTitle>
            <AlertDialogDescription>
              –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {selectedEmployee?.full_name}? 
              –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>–û—Ç–º–µ–Ω–∞</AlertDialogCancel>
            <AlertDialogAction onClick={handleDeleteEmployee} className="bg-red-600 hover:bg-red-700">
              –£–¥–∞–ª–∏—Ç—å
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* –í—Å–µ –¥–∏–∞–ª–æ–≥–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ */}
      <DatabaseEmployeeDialogs
        isAddDialogOpen={isAddDialogOpen}
        setIsAddDialogOpen={setIsAddDialogOpen}
        isEditDialogOpen={isEditDialogOpen}
        setIsEditDialogOpen={setIsEditDialogOpen}
        isPasswordDialogOpen={isPasswordDialogOpen}
        setIsPasswordDialogOpen={setIsPasswordDialogOpen}
        newEmployeeForm={newEmployeeForm}
        setNewEmployeeForm={setNewEmployeeForm}
        editForm={editForm}
        setEditForm={setEditForm}
        passwordForm={passwordForm}
        setPasswordForm={setPasswordForm}
        selectedEmployee={selectedEmployee}
        onAddEmployee={handleAddEmployee}
        onSaveEditEmployee={handleSaveEditEmployee}
        onChangePassword={handleChangePassword}
      />

      {/* –§–æ—Ä–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
      {isNotificationFormOpen && selectedEmployeeForNotification && (
        <NotificationForm
          isOpen={isNotificationFormOpen}
          onClose={handleCloseNotificationForm}
          employees={employees.map(emp => databaseService.convertToOldEmployee(emp))}
          selectedEmployee={databaseService.convertToOldEmployee(selectedEmployeeForNotification)}
          currentUserRole="admin"
        />
      )}
    </div>
  );
};

export default DatabaseEmployeeManagement;