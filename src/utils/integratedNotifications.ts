// –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ë–î + Push + Email)

import { notificationsService, CreateNotificationData } from './notificationsService';
import { pushNotificationService, pushNotificationHelpers } from './pushNotifications';

const EMAIL_API_URL = 'https://functions.poehali.dev/75306ed7-e91c-4135-84fe-8b519f7dcf17';

interface Employee {
  id: number;
  email: string;
  full_name: string;
}

interface NotificationOptions extends CreateNotificationData {
  sendPush?: boolean;
  sendEmail?: boolean;
  employeeEmail?: string;
  employeeName?: string;
}

class IntegratedNotificationService {
  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
  async sendNotification(options: NotificationOptions): Promise<void> {
    const {
      employee_id,
      title,
      message,
      type = 'info',
      priority = 'normal',
      link,
      metadata,
      sendPush = true,
      sendEmail = false,
      employeeEmail,
      employeeName,
    } = options;

    // 1. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try {
      await notificationsService.createNotification({
        employee_id,
        title,
        message,
        type,
        priority,
        link,
        metadata,
      });
    } catch (error) {
      console.error('Error saving notification to database:', error);
    }

    // 2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (sendPush && this.isPushEnabled()) {
      try {
        await this.sendPushNotification(title, message, type, link);
      } catch (error) {
        console.error('Error sending push notification:', error);
      }
    }

    // 3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å email
    if (sendEmail && employeeEmail) {
      try {
        await this.sendEmailNotification(
          employeeEmail,
          title,
          message,
          type,
          employeeName
        );
      } catch (error) {
        console.error('Error sending email notification:', error);
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  private isPushEnabled(): boolean {
    return pushNotificationService.getPermission() === 'granted';
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  private async sendPushNotification(
    title: string,
    message: string,
    type: string,
    link?: string
  ): Promise<void> {
    const iconMap: Record<string, string> = {
      info: 'üîµ',
      success: '‚úÖ',
      warning: '‚ö†Ô∏è',
      error: '‚ùå',
      assignment: 'üìã',
    };

    await pushNotificationService.sendNotification({
      title: `${iconMap[type] || 'üîî'} ${title}`,
      body: message,
      icon: '/logo.png',
      tag: `notification-${Date.now()}`,
      data: { link },
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  private async sendEmailNotification(
    toEmail: string,
    subject: string,
    message: string,
    type: string,
    recipientName?: string
  ): Promise<void> {
    const greeting = recipientName ? `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${recipientName}!\n\n` : '';
    const fullMessage = `${greeting}${message}`;

    const response = await fetch(EMAIL_API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        to_email: toEmail,
        subject,
        message: fullMessage,
        type,
      }),
    });

    if (!response.ok) {
      throw new Error('Failed to send email');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private getNotificationSettings(employeeId: number) {
    const savedSettings = localStorage.getItem(`notification-settings-${employeeId}`);
    if (savedSettings) {
      return JSON.parse(savedSettings);
    }
    return {
      emailEnabled: true,
      categories: {
        tests: true,
        courses: true,
        assignments: true,
        deadlines: true,
        announcements: true,
      },
    };
  }

  // –£–≤–µ–¥–æ–º–∏—Ç—å –æ –Ω–æ–≤–æ–º —Ç–µ—Å—Ç–µ
  async notifyNewTest(
    employeeId: number,
    employeeEmail: string,
    employeeName: string,
    testTitle: string,
    testDescription: string
  ): Promise<void> {
    const settings = this.getNotificationSettings(employeeId);
    if (!settings.categories.tests) return;

    await this.sendNotification({
      employee_id: employeeId,
      title: '–ù–æ–≤—ã–π —Ç–µ—Å—Ç',
      message: `–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–µ—Å—Ç "${testTitle}". ${testDescription}`,
      type: 'assignment',
      priority: 'high',
      link: '/tests',
      sendPush: true,
      sendEmail: settings.emailEnabled,
      employeeEmail,
      employeeName,
      metadata: { test_title: testTitle },
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ push
    if (this.isPushEnabled()) {
      await pushNotificationHelpers.notifyNewTest(testTitle, testDescription);
    }
  }

  // –£–≤–µ–¥–æ–º–∏—Ç—å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ç–µ—Å—Ç–∞
  async notifyTestResult(
    employeeId: number,
    employeeEmail: string,
    employeeName: string,
    testTitle: string,
    passed: boolean,
    percentage: number
  ): Promise<void> {
    const settings = this.getNotificationSettings(employeeId);
    if (!settings.categories.tests) return;

    await this.sendNotification({
      employee_id: employeeId,
      title: passed ? '–¢–µ—Å—Ç —Å–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!' : '–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω',
      message: passed
        ? `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç "${testTitle}" —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º ${percentage}%.`
        : `–¢–µ—Å—Ç "${testTitle}" –Ω–µ –ø—Ä–æ–π–¥–µ–Ω. –ù–∞–±—Ä–∞–Ω–æ ${percentage}%. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.`,
      type: passed ? 'success' : 'warning',
      priority: passed ? 'normal' : 'high',
      link: '/tests',
      sendPush: true,
      sendEmail: settings.emailEnabled,
      employeeEmail,
      employeeName,
      metadata: { test_title: testTitle, percentage, passed },
    });

    if (this.isPushEnabled()) {
      await pushNotificationHelpers.notifyTestResult(testTitle, passed, percentage);
    }
  }

  // –£–≤–µ–¥–æ–º–∏—Ç—å –æ –Ω–æ–≤–æ–º –∫—É—Ä—Å–µ
  async notifyNewCourse(
    employeeId: number,
    employeeEmail: string,
    employeeName: string,
    courseTitle: string,
    courseDescription: string,
    startDate?: string
  ): Promise<void> {
    const settings = this.getNotificationSettings(employeeId);
    if (!settings.categories.courses) return;

    const dateText = startDate
      ? ` –ù–∞—á–∞–ª–æ: ${new Date(startDate).toLocaleDateString('ru-RU')}`
      : '';

    await this.sendNotification({
      employee_id: employeeId,
      title: '–ù–æ–≤—ã–π –∫—É—Ä—Å',
      message: `–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫—É—Ä—Å "${courseTitle}". ${courseDescription}.${dateText}`,
      type: 'info',
      priority: 'normal',
      link: '/knowledge',
      sendPush: true,
      sendEmail: settings.emailEnabled,
      employeeEmail,
      employeeName,
      metadata: { course_title: courseTitle, start_date: startDate },
    });

    if (this.isPushEnabled()) {
      await pushNotificationHelpers.notifyNewCourse(courseTitle, startDate);
    }
  }

  // –£–≤–µ–¥–æ–º–∏—Ç—å –æ —Å—Ä–æ—á–Ω–æ–º –¥–µ–¥–ª–∞–π–Ω–µ
  async notifyUrgentDeadline(
    employeeId: number,
    employeeEmail: string,
    employeeName: string,
    assignmentTitle: string,
    hoursLeft: number
  ): Promise<void> {
    const settings = this.getNotificationSettings(employeeId);
    if (!settings.categories.deadlines) return;

    await this.sendNotification({
      employee_id: employeeId,
      title: '–°—Ä–æ—á–Ω–æ! –ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –¥–µ–¥–ª–∞–π–Ω',
      message: `–î–æ –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞–Ω–∏—è "${assignmentTitle}" –æ—Å—Ç–∞–ª–æ—Å—å ${hoursLeft} —á–∞—Å–æ–≤! –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –≤–æ–≤—Ä–µ–º—è.`,
      type: 'warning',
      priority: 'urgent',
      link: '/assignments',
      sendPush: true,
      sendEmail: settings.emailEnabled,
      employeeEmail,
      employeeName,
      metadata: { assignment_title: assignmentTitle, hours_left: hoursLeft },
    });

    if (this.isPushEnabled()) {
      await pushNotificationHelpers.notifyUrgentDeadline(assignmentTitle, hoursLeft);
    }
  }

  // –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  async broadcastAnnouncement(
    employees: Employee[],
    title: string,
    message: string,
    urgent: boolean = false
  ): Promise<void> {
    for (const employee of employees) {
      const settings = this.getNotificationSettings(employee.id);
      if (!settings.categories.announcements) continue;

      await this.sendNotification({
        employee_id: employee.id,
        title,
        message,
        type: urgent ? 'warning' : 'info',
        priority: urgent ? 'urgent' : 'normal',
        sendPush: true,
        sendEmail: settings.emailEnabled,
        employeeEmail: employee.email,
        employeeName: employee.full_name,
      });
    }

    if (this.isPushEnabled()) {
      await pushNotificationHelpers.notifyAnnouncement(title, message, urgent);
    }
  }
}

export const integratedNotifications = new IntegratedNotificationService();
