// –°–∏—Å—Ç–µ–º–∞ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

export interface PushNotificationOptions {
  title: string;
  body: string;
  icon?: string;
  badge?: string;
  tag?: string;
  data?: any;
  requireInteraction?: boolean;
  silent?: boolean;
}

class PushNotificationService {
  private permission: NotificationPermission = 'default';
  private isSupported: boolean;

  constructor() {
    this.isSupported = 'Notification' in window;
    if (this.isSupported) {
      this.permission = Notification.permission;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –±—Ä–∞—É–∑–µ—Ä–æ–º
  isNotificationSupported(): boolean {
    return this.isSupported;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
  getPermission(): NotificationPermission {
    return this.permission;
  }

  // –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async requestPermission(): Promise<NotificationPermission> {
    if (!this.isSupported) {
      console.warn('Push notifications are not supported in this browser');
      return 'denied';
    }

    if (this.permission === 'granted') {
      return 'granted';
    }

    try {
      this.permission = await Notification.requestPermission();
      return this.permission;
    } catch (error) {
      console.error('Error requesting notification permission:', error);
      return 'denied';
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  async sendNotification(options: PushNotificationOptions): Promise<void> {
    if (!this.isSupported) {
      console.warn('Push notifications are not supported');
      return;
    }

    if (this.permission !== 'granted') {
      const permission = await this.requestPermission();
      if (permission !== 'granted') {
        console.warn('Notification permission denied');
        return;
      }
    }

    try {
      const notification = new Notification(options.title, {
        body: options.body,
        icon: options.icon || '/logo.png',
        badge: options.badge || '/logo-small.png',
        tag: options.tag,
        data: options.data,
        requireInteraction: options.requireInteraction || false,
        silent: options.silent || false,
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
      notification.onclick = (event) => {
        event.preventDefault();
        window.focus();
        
        // –ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (options.data?.link) {
          window.location.href = options.data.link;
        }
        
        notification.close();
      };

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        notification.close();
      }, 10000);

    } catch (error) {
      console.error('Error sending notification:', error);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∑–≤—É–∫–æ–º
  async sendSoundNotification(options: PushNotificationOptions): Promise<void> {
    await this.sendNotification({
      ...options,
      silent: false,
      requireInteraction: true,
    });

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫
    this.playNotificationSound();
  }

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  private playNotificationSound(): void {
    try {
      const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBSl+zPLTgjMGHm7A7+OZUQ0PVKni7q9aGAU9k9n0xnMmBSp+y/PVgTQHImS96+eUSwwMT6fk8LllHgU2jdXxxXMnBSh6yPHZhzgHHWu47+WVUgwOUqfj8LVjHQU1i9XyxnUoBSh4x/HbizQHHmu47+WVUgwOUqfj8LVjHQU1i9XyxnUoBSh4x/HbizQHHmu47+WVUgwOUqfj8LVjHQU1i9XyxnUoBSh4x/HbizQHHmu47+WVUgwOUqfj8LVjHQU1i9XyxnUoBSh4x/HbizQHHmu47+WVUgwOUqfj8LVjHQU1i9XyxnUoBSh4x/HbizQHHmu47+WVUgwOUqfj8LVjHQU1i9XyxnUoBSh4x/HbizQHHmu47+WVUgwOUqfj8LVjHQU1i9XyxnUoBSh4x/HbizQHHmu47+WVUgwOUqfj8LVjHQU1i9XyxnUoBSh4x/HbizQHHmu47+WVUgwOUqfj8LVjHQU1i9XyxnUoBSh4x/HbizQHHmu47+WVUgwOUqfj8A==');
      audio.volume = 0.3;
      audio.play().catch(() => {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      });
    } catch (error) {
      console.error('Error playing notification sound:', error);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Ç—Ä–µ–±—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è)
  async sendUrgentNotification(options: PushNotificationOptions): Promise<void> {
    await this.sendNotification({
      ...options,
      requireInteraction: true,
      silent: false,
    });

    this.playNotificationSound();
  }

  // –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —Ç–µ–≥–æ–º
  closeNotificationsByTag(tag: string): void {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ Service Worker
    console.log(`Closing notifications with tag: ${tag}`);
  }
}

export const pushNotificationService = new PushNotificationService();

// –•–µ–ª–ø–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export const pushNotificationHelpers = {
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ç–µ—Å—Ç–µ
  async notifyNewTest(testTitle: string, description: string): Promise<void> {
    await pushNotificationService.sendNotification({
      title: 'üìù –ù–æ–≤—ã–π —Ç–µ—Å—Ç',
      body: `–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–µ—Å—Ç "${testTitle}". ${description}`,
      icon: '/icons/test-icon.png',
      tag: 'new-test',
      data: { link: '/tests' },
    });
  },

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ç–µ—Å—Ç–∞
  async notifyTestResult(testTitle: string, passed: boolean, percentage: number): Promise<void> {
    await pushNotificationService.sendNotification({
      title: passed ? '‚úÖ –¢–µ—Å—Ç —Å–¥–∞–Ω!' : '‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω',
      body: `${testTitle}: ${percentage}%`,
      icon: passed ? '/icons/success.png' : '/icons/warning.png',
      tag: 'test-result',
      data: { link: '/tests' },
    });
  },

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏
  async notifyNewAssignment(title: string, deadline?: Date): Promise<void> {
    const deadlineText = deadline 
      ? ` –°—Ä–æ–∫: ${deadline.toLocaleDateString('ru-RU')}`
      : '';
    
    await pushNotificationService.sendNotification({
      title: 'üìã –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ',
      body: `${title}${deadlineText}`,
      icon: '/icons/assignment.png',
      tag: 'new-assignment',
      data: { link: '/assignments' },
    });
  },

  // –°—Ä–æ—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ
  async notifyUrgentDeadline(title: string, hoursLeft: number): Promise<void> {
    await pushNotificationService.sendUrgentNotification({
      title: '‚ö†Ô∏è –°—Ä–æ—á–Ω–æ! –ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –¥–µ–¥–ª–∞–π–Ω',
      body: `${title}. –û—Å—Ç–∞–ª–æ—Å—å ${hoursLeft} —á–∞—Å–æ–≤!`,
      icon: '/icons/urgent.png',
      tag: 'urgent-deadline',
      data: { link: '/assignments' },
      requireInteraction: true,
    });
  },

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫—É—Ä—Å–µ
  async notifyNewCourse(courseTitle: string, startDate?: string): Promise<void> {
    const dateText = startDate 
      ? ` –ù–∞—á–∞–ª–æ: ${new Date(startDate).toLocaleDateString('ru-RU')}`
      : '';
    
    await pushNotificationService.sendNotification({
      title: 'üéì –ù–æ–≤—ã–π –∫—É—Ä—Å',
      body: `–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫—É—Ä—Å "${courseTitle}".${dateText}`,
      icon: '/icons/course.png',
      tag: 'new-course',
      data: { link: '/knowledge' },
    });
  },

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±—â–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
  async notifyAnnouncement(title: string, message: string, urgent: boolean = false): Promise<void> {
    if (urgent) {
      await pushNotificationService.sendUrgentNotification({
        title: `üîî ${title}`,
        body: message,
        icon: '/icons/announcement.png',
        tag: 'announcement',
        requireInteraction: true,
      });
    } else {
      await pushNotificationService.sendNotification({
        title: `üîî ${title}`,
        body: message,
        icon: '/icons/announcement.png',
        tag: 'announcement',
      });
    }
  },
};
