"""
–õ–æ–∫–∞–ª—å–Ω—ã–π HTTP API —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SQL Server
–ó–∞–ø—É—Å–∫–∞–π –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ —Å SQL Server, –∑–∞—Ç–µ–º –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–π —á–µ—Ä–µ–∑ cloudflare
"""

from http.server import HTTPServer, BaseHTTPRequestHandler
import json
import pyodbc
from urllib.parse import urlparse, parse_qs

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQL Server
SQL_SERVER = '127.0.0.1'
SQL_DATABASE = 'StudentAccounting'
SQL_USERNAME = 'sa'
SQL_PASSWORD = '12345'

class SQLServerHandler(BaseHTTPRequestHandler):
    
    def do_OPTIONS(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            # –ü–∞—Ä—Å–∏–º URL –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            parsed = urlparse(self.path)
            params = parse_qs(parsed.query)
            
            query = params.get('query', [''])[0]
            
            if not query:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
                query = """
                    SELECT TABLE_NAME 
                    FROM INFORMATION_SCHEMA.TABLES 
                    WHERE TABLE_TYPE = 'BASE TABLE'
                """
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQL Server
            conn_str = (
                f'DRIVER={{ODBC Driver 17 for SQL Server}};'
                f'SERVER={SQL_SERVER};'
                f'DATABASE={SQL_DATABASE};'
                f'UID={SQL_USERNAME};'
                f'PWD={SQL_PASSWORD}'
            )
            
            conn = pyodbc.connect(conn_str, timeout=10)
            cursor = conn.cursor()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            cursor.execute(query)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            columns = [column[0] for column in cursor.description]
            rows = []
            for row in cursor.fetchall():
                rows.append(dict(zip(columns, row)))
            
            cursor.close()
            conn.close()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            result = {
                'success': True,
                'data': rows,
                'count': len(rows)
            }
            
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(json.dumps(result, default=str, ensure_ascii=False).encode('utf-8'))
            
        except Exception as e:
            self.send_error_response(str(e))
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            content_length = int(self.headers['Content-Length'])
            body = self.rfile.read(content_length)
            data = json.loads(body.decode('utf-8'))
            
            query = data.get('query', '')
            
            if not query:
                raise ValueError('–ù–µ —É–∫–∞–∑–∞–Ω SQL –∑–∞–ø—Ä–æ—Å')
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQL Server
            conn_str = (
                f'DRIVER={{ODBC Driver 17 for SQL Server}};'
                f'SERVER={SQL_SERVER};'
                f'DATABASE={SQL_DATABASE};'
                f'UID={SQL_USERNAME};'
                f'PWD={SQL_PASSWORD}'
            )
            
            conn = pyodbc.connect(conn_str, timeout=10)
            cursor = conn.cursor()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            cursor.execute(query)
            conn.commit()
            
            affected = cursor.rowcount
            
            cursor.close()
            conn.close()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            result = {
                'success': True,
                'message': '–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω',
                'affected_rows': affected
            }
            
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(json.dumps(result, default=str, ensure_ascii=False).encode('utf-8'))
            
        except Exception as e:
            self.send_error_response(str(e))
    
    def send_error_response(self, error_message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏"""
        result = {
            'success': False,
            'error': error_message
        }
        
        self.send_response(500)
        self.send_header('Content-Type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.end_headers()
        self.wfile.write(json.dumps(result, ensure_ascii=False).encode('utf-8'))
    
    def log_message(self, format, *args):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        print(f"[SQL API] {self.address_string()} - {format % args}")

if __name__ == '__main__':
    PORT = 8000
    
    print("=" * 60)
    print("üöÄ SQL Server API –∑–∞–ø—É—â–µ–Ω!")
    print("=" * 60)
    print(f"–°–ª—É—à–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É: {PORT}")
    print(f"SQL Server: {SQL_SERVER}")
    print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {SQL_DATABASE}")
    print("")
    print("–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏ –≤ –î–†–£–ì–û–ú –æ–∫–Ω–µ:")
    print(f"  cloudflared.exe tunnel --url http://localhost:{PORT}")
    print("")
    print("–ü–æ–ª—É—á–∏—à—å –∞–¥—Ä–µ—Å –≤–∏–¥–∞:")
    print("  https://something.trycloudflare.com")
    print("")
    print("–û—Ç–ø—Ä–∞–≤—å —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –Æ—Ä–µ!")
    print("=" * 60)
    print("")
    
    server = HTTPServer(('0.0.0.0', PORT), SQLServerHandler)
    
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        print("\n\n–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–µ—Ä–≤–µ—Ä...")
        server.shutdown()
